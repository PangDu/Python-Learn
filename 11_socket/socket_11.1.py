"""
        Socket编程

"""

"""
        案例二百七十一 TCP通信协议

"""
print(f'{"案例二百七十一 TCP通信协议" :^30s}' + "\n")
# 服务器处理流程:
#              创建Socket对象
#              绑定本地计算机上有效的地址和端口
#              监听客户端的连接请求
#              接受客户端的连接,并产生一个新的Socket对象。此对象用于与客户端之间进行通信
#              向客户端发送数据,或接收从客户端发来的数据
#              关闭Socket对象，释放资源。通信结束。
# TCP客户端流程:
#              创建Socket对象
#              连接服务器,连接的地址与端口就是服务器所绑定的监听端口
#              连接建立后,可向服务器发送数据,或接收来自服务器的数据
#              关闭Socket对象,通信结束
print("="*36)
"""
        案例二百七十二 UDP通信协议

"""
print(f'{"案例二百七十二 UDP通信协议" :^30s}' + "\n")
# 提供简单的不可靠数据传输服务,通信之前不需要建立连接
# UDP服务器处理流程:
#                 创建Socket对象
#                 调用bind方法绑定一个本地地址和端口
#                 调用recvfrom方法接收来自客户端的数据
#                 关闭Socket对象
# UDP客户端处理流程:
#                 创建Socket对象
#                 调用sendto方法直接向服务器发送数据
#                 关闭Socket对象
print("="*36)
"""
        案例二百七十三 TCPServer与UDPServer

"""
print(f'{"案例二百七十三 TCPServer与UDPServer" :^30s}' + "\n")
print("="*36)